/** @format */

// Rem output with px fallback
.font-size(@sizeValue: 16, @lineHeight: false ) {
	font-size: @sizeValue + px;
	font-size: (@sizeValue / 16) + rem; 
}
.font-size (@lineHeight) when (default()) {
	line-height: @lineHeight;
}

// .hover-state {
// 	&:hover,
// 	&:active,
// 	&:focus {
// 		@content;
// 	}
// }

// Adds animation to placeholder section
.placeholder( @lighten-percentage: 30% ) {
	animation: loading-fade 1.6s ease-in-out infinite;
	background-color: @core-grey-light-500;
	color: transparent;

	&::after {
		content: '\00a0';
	}

	@media screen and (prefers-reduced-motion: reduce) {
		animation: none;
	}
}

// Adds animation to transforms
.animate-transform( @duration: 0.2s ) {
	transition: transform ease @duration;

	@media screen and (prefers-reduced-motion: reduce) {
		transition: none;
	}
}

// Gutenberg mixins. These are temporary until Gutenberg's mixins are exposed.
/**
 * Breakpoint mixins
 */

// .break-huge() {
// 	@media (min-width: @break-huge) {
// 		@content;
// 	}
// }

// .break-wide() {
// 	@media (min-width: @break-wide) {
// 		@content;
// 	}
// }

// .break-xlarge() {
// 	@media (min-width: @break-xlarge) {
// 		@content;
// 	}
// }

// .break-large() {
// 	@media (min-width: @break-large) {
// 		@content;
// 	}
// }

// .break-medium() {
// 	@media (min-width: @break-medium) {
// 		@content;
// 	}
// }

// .break-small() {
// 	@media (min-width: @break-small) {
// 		@content;
// 	}
// }

// .break-mobile() {
// 	@media (min-width: @break-mobile) {
// 		@content;
// 	}
// }

// .break-zoomed-in() {
// 	@media (min-width: @break-zoomed-in) {
// 		@content;
// 	}
// }

// Buttons with rounded corners.
.button-style__disabled {
	opacity: 0.6;
	cursor: default;
}

.button-style__hover {
	background-color: @studio-white;
	color: @dark-gray-900;
	box-shadow: inset 0 0 0 1px @light-gray-500, inset 0 0 0 2px @studio-white,
		0 1px 1px rgba(@dark-gray-900, 0.2);
}

.button-style__active() {
	outline: none;
	background-color: @studio-white;
	color: @dark-gray-900;
	box-shadow: inset 0 0 0 1px @light-gray-700, inset 0 0 0 2px @studio-white;
}

.button-style__focus-active() {
	background-color: @studio-white;
	color: @dark-gray-900;
	box-shadow: inset 0 0 0 1px @dark-gray-300, inset 0 0 0 2px @studio-white;

	// Windows High Contrast mode will show this outline, but not the box-shadow.
	outline: 2px solid transparent;
	outline-offset: -2px;
}

/* stylelint-disable block-closing-brace-newline-after */
  
.reduce-motion (@property) when (@property ="transition") {
  @media (prefers-reduced-motion: reduce) {
  	transition-duration: 0s;
  }
}
.reduce-motion (@property) when (@property ="animation") {
  @media (prefers-reduced-motion: reduce) {
  	animation-duration: 1ms;
  }
}
.reduce-motion (@property) when (default()) {
  @media (prefers-reduced-motion: reduce) {
  	transition-duration: 0s;
  	animation-duration: 1ms;
  }
}
/* stylelint-enable */

// .break-small() {
// 	@media (min-width: @break-small) {
// 		@content;
// 	}
// }

// Gutenberg Switch.
.switch-style__focus-active() {
	box-shadow: 0 0 0 2px @studio-white, 0 0 0 3px @dark-gray-300;

	// Windows High Contrast mode will show this outline, but not the box-shadow.
	outline: 2px solid transparent;
	outline-offset: 2px;
}

// Sets positions for children of grid elements

.set-grid-item-position (@wrap-after, @number-of-items, @i:1 ) when (@i > @number-of-items) {
	&:nth-child(@{i}) {
		grid-column-start: (@i - 1) '%' @wrap-after +1;
		grid-column-end: (@i - 1) '%' @wrap-after + 2;
		grid-row-start: floor((@i - 1) / @wrap-after) + 1;
		grid-row-end: floor((@i - 1) / @wrap-after) + 2;
	}
}
// .set-grid-item-position( @wrap-after, @number-of-items ) {
// 	@for @i from 1 through @number-of-items {
// 		&:nth-child(@{i}) {
// 			grid-column-start: (@{i} - 1) % @wrap-after + 1;
// 			grid-column-end: #{(@i - 1) % @wrap-after + 2};
// 			grid-row-start: #{floor((@i - 1) / @wrap-after) + 1};
// 			grid-row-end: #{floor((@i - 1) / @wrap-after) + 2};
// 		}
// 	}
// }

// Hide an element from sighted users, but availble to screen reader users.
.visually-hidden() {
	clip: rect(1px, 1px, 1px, 1px);
	clip-path: inset(50%);
	height: 1px;
	width: 1px;
	margin: -1px;
	overflow: hidden;
	/* Many screen reader and browser combinations announce broken words as they would appear visually. */
	overflow-wrap: normal !important;
	word-wrap: normal !important;
}

// Unhide a visually hidden element
.visually-shown() {
	clip: auto;
	clip-path: none;
	height: auto;
	width: auto;
	margin: unset;
	overflow: hidden;
}
 
