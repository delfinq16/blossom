{"version":3,"sources":["/home/users/himanshu.kumar/www/html/newtest/wp-content/plugins/woo-point-of-sale/packages/navigation/src/index.js"],"names":["getPath","location","pathname","getPersistedQuery","query","navUtils","getQuery","params","getIdsFromQuery","queryString","split","map","id","parseInt","filter","Boolean","getSearchWords","Error","search","searchWord","replace","getNewPath","path","currentQuery","args","length","substring","onQueryChange","param","key","dir","updateQueryString","orderby","order","queryParam","ids","undefined","value","newPath","push"],"mappings":"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","sourcesContent":["/** @format */\n/**\n * External dependencies\n */\nimport { addQueryArgs } from '@wordpress/url';\nimport { parse } from 'qs';\nimport { pick, uniq } from 'lodash';\nimport { applyFilters } from '@wordpress/hooks';\n\n/**\n * Internal dependencies\n */\nimport { getHistory } from './history';\n\n// Expose history so all uses get the same history object.\nexport { getHistory };\n\n// Export all filter utilities\nexport * from './filters';\n\n/**\n * Internal dependencies\n */\n// Import the module into itself. Functions consumed from this import can be mocked in tests.\nimport * as navUtils from './index';\n\n/**\n * Get the current path from history.\n *\n * @return {String}  Current path.\n */\nexport const getPath = () => getHistory().location.pathname;\n\n/**\n * Gets query parameters that should persist between screens or updates\n * to reports, such as filtering.\n *\n * @param {Object} query Query containing the parameters.\n * @return {Object} Object containing the persisted queries.\n */\nexport const getPersistedQuery = ( query = navUtils.getQuery() ) => {\n\tconst params = applyFilters( 'woocommerce_admin_persisted_queries', [\n\t\t'period',\n\t\t'compare',\n\t\t'before',\n\t\t'after',\n\t\t'interval',\n\t\t'type',\n\t] );\n\treturn pick( query, params );\n};\n\n/**\n * Get an array of IDs from a comma-separated query parameter.\n *\n * @param {string} queryString string value extracted from URL.\n * @return {Array} List of IDs converted to numbers.\n */\nexport function getIdsFromQuery( queryString = '' ) {\n\treturn uniq(\n\t\tqueryString\n\t\t\t.split( ',' )\n\t\t\t.map( id => parseInt( id, 10 ) )\n\t\t\t.filter( Boolean )\n\t);\n}\n\n/**\n * Get an array of searched words given a query.\n *\n * @param {Object} query Query object.\n * @return {Array} List of search words.\n */\nexport function getSearchWords( query = navUtils.getQuery() ) {\n\tif ( typeof query !== 'object' ) {\n\t\tthrow new Error(\n\t\t\t'Invalid parameter passed to getSearchWords, it expects an object or no parameters.'\n\t\t);\n\t}\n\tconst { search } = query;\n\tif ( ! search ) {\n\t\treturn [];\n\t}\n\tif ( typeof search !== 'string' ) {\n\t\tthrow new Error(\n\t\t\t\"Invalid 'search' type. getSearchWords expects query's 'search' property to be a string.\"\n\t\t);\n\t}\n\treturn search.split( ',' ).map( searchWord => searchWord.replace( '%2C', ',' ) );\n}\n\n/**\n * Return a URL with set query parameters.\n *\n * @param {Object} query object of params to be updated.\n * @param {String} path Relative path (defaults to current path).\n * @param {Object} currentQuery object of current query params (defaults to current querystring).\n * @return {String}  Updated URL merging query params into existing params.\n */\nexport function getNewPath( query, path = getPath(), currentQuery = getQuery() ) {\n\tconst args = { ...currentQuery, ...query };\n\tif ( '/' !== path ) {\n\t\targs.path = path;\n\t}\n\n\treturn addQueryArgs( '', args );\n}\n\n/**\n * Get the current query string, parsed into an object, from history.\n *\n * @return {Object}  Current query object, defaults to empty object.\n */\nexport function getQuery() {\n\tconst search = getHistory().location.search;\n\tif ( search.length ) {\n\t\treturn parse( search.substring( 1 ) ) || {};\n\t}\n\treturn {};\n}\n\n/**\n * This function returns an event handler for the given `param`\n *\n * @param {string} param The parameter in the querystring which should be updated (ex `page`, `per_page`)\n * @param {string} path Relative path (defaults to current path).\n * @param {string} query object of current query params (defaults to current querystring).\n * @return {function} A callback which will update `param` to the passed value when called.\n */\nexport function onQueryChange( param, path = getPath(), query = getQuery() ) {\n\tswitch ( param ) {\n\t\tcase 'sort':\n\t\t\treturn ( key, dir ) => updateQueryString( { orderby: key, order: dir }, path, query );\n\t\tcase 'compare':\n\t\t\treturn ( key, queryParam, ids ) =>\n\t\t\t\tupdateQueryString(\n\t\t\t\t\t{\n\t\t\t\t\t\t[ queryParam ]: `compare-${ key }`,\n\t\t\t\t\t\t[ key ]: ids,\n\t\t\t\t\t\tsearch: undefined,\n\t\t\t\t\t},\n\t\t\t\t\tpath,\n\t\t\t\t\tquery\n\t\t\t\t);\n\t\tdefault:\n\t\t\treturn value => updateQueryString( { [ param ]: value }, path, query );\n\t}\n}\n\n/**\n * Updates the query parameters of the current page.\n *\n * @param {Object} query object of params to be updated.\n * @param {String} path Relative path (defaults to current path).\n * @param {Object} currentQuery object of current query params (defaults to current querystring).\n */\nexport function updateQueryString( query, path = getPath(), currentQuery = getQuery() ) {\n\tconst newPath = getNewPath( query, path, currentQuery );\n\t// console.log(newPath)\n\t// console.log(document.location.push(document.location.href))\n\tgetHistory().push( newPath );\n}\n"]}